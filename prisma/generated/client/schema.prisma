generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:75423819A@localhost:5432/ApiManagerDB?schema=public"
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  username      String     @unique
  accounts      Account[]
  Document      Document[]
  sessions      Session[]
  userTeams     UserTeam[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Document {
  id          String       @id @default(cuid())
  userId      String?
  name        String       @unique
  description String
  type        DocumentType @default(private)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  idName      String       @unique
  teamId      String?
  articles    Article[]
  team        Team?        @relation(fields: [teamId], references: [id])
  user        User?        @relation(fields: [userId], references: [id])

  @@map("documents")
}

model Article {
  id         String    @id @default(cuid())
  title      String
  content    Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  documentId String
  parentId   String?
  idTitle    String
  sadge      String
  document   Document  @relation(fields: [documentId], references: [id])
  parent     Article?  @relation("ParentChild", fields: [parentId], references: [id])
  childs     Article[] @relation("ParentChild")

  @@map("articles")
}

model Team {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  documents   Document[]
  userTeams   UserTeam[]

  @@map("teams")
}

model UserTeam {
  id        String   @id @default(cuid())
  userId    String
  teamId    String   @map("teamId")
  status    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      TeamRole
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("userTeams")
}

enum DocumentType {
  public
  private
}

enum TeamRole {
  OWNER
  ADMIN
  BASE
}
