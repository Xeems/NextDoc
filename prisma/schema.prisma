generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    username       String          @unique
    accounts       Account[]
    sessions       Session[]
    userWorkspaces UserWorkspace[]

    @@map("users")
}

model Account {
    id                String  @id @unique @default(cuid())
    userId            String  @map("user_id")
    type              String?
    provider          String
    providerAccountId String  @map("provider_account_id")
    token_type        String?
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    scope             String?
    id_token          String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @unique @map("session_token")
    accessToken  String?  @map("access_token")
    expires      DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([identifier, token])
}

model Document {
    id          String       @id @default(cuid())
    userId      String?
    name        String
    idName      String
    description String
    type        DocumentType @default(private)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    articles Article[]

    workspaceId String?
    workspace   Workspace? @relation(fields: [workspaceId], references: [id])

    @@map("documents")
}

model Article {
    id      String  @id @default(cuid())
    title   String
    idTitle String
    content String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    documentId String
    document   Document @relation(fields: [documentId], references: [id])

    parentId String?
    parent   Article? @relation("ParentChild", fields: [parentId], references: [id])

    childs Article[] @relation("ParentChild")

    @@map("articles")
}

model Workspace {
    id            String        @id @default(cuid())
    name          String        @unique
    description   String?
    workspaceType WorkspaceType

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    documents      Document[]
    workspaceUsers UserWorkspace[]
}

enum WorkspaceType {
    USER
    TEAM
}

model UserWorkspace {
    id          String        @id @default(cuid())
    userId      String
    workspaceId String
    status      String?
    role        WorksapceRole

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    workspace Workspace @relation(fields: [workspaceId], references: [id])
    user      User      @relation(fields: [userId], references: [id])
}

enum DocumentType {
    public
    private
}

enum WorksapceRole {
    OWNER
    ADMIN
    BASE
}
